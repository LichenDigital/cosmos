name = 'file'
alternate-names = [ 'f' ]
description = 'File management'
version = 0.1

# Dependencies on other modules
dependencies = (
    required = [ 'co.id', 'co.hash' ],
    optional = [ 'co.auth', 'co.security' ],
    version_constraints = (
        'co.id' >= 0.1,
        'co.hash' >= 0.2,
    )
)

# Error conditions and exceptions
errors = (
    NotFound,
    AccessDenied, 
    InsufficientResources,
    DataCorrupted,
    OperationTimeout,
    InvalidInput,
    ConflictingState,
    NotImplemented,
)

data-definition = file [
    id = co.id[id.id]
    hash = co.hash[hash.hash]
    name = string default = last | 'file'++ # Defaults to either using the keyword last's value aka the last value that the module remembers using for this value. Hmmm. Interesting concept. I'm assuming one would want to be able to create default values for inputs and outputs. With expressions in those (to provide for the ability to write algorythms)
    location = string
    type = string
    size = number
    auth = object
    metadata = object
    data = object
]

commands = (
    create () [],
    get,
    update,
    delete,

    # Location
    duplicate,
    move,
    copy,
    paste,

    # Metadata
    rename,

    # Access
    lock,
    unlock,
    
    # Data manipulation
    append,
    prepend,
    insert,

    # Encryption
    hash,
    encrypt,
    decrypt,

    # Compression
    compress,
    decompress,

    # Versioning
    snapshot,
    revert,
    restore,
    diff,
    merge,
)

command create
performance = async, expected_latency = 'medium'
inputs = (
    'n' | 'names' : file[name], # The | character here represents or. Is says this input can be referenced by the label n or names with the equals sign. For example n='thisIsAFileName'. n='the file name'. Need a way of indicating that an input can handle multiple vales (of the same type) like create(names=['this is a name', 'this is another name'])
    'l' | 'locations' : file[location], # Location can include the directory or the file name within the directory. If it's a directory (ending in /) and a file name is provided, than it matches the files with those names. If it ends in just the directory than it resolves to all the files within that directory (in both cases, excluding times when negatives are provided in tother fields)
    't' | 'types' : file[type],
    's' | 'sizes' : file[size],
    'm' : file[metadata],
    'd' : file[data],
)
outputs = (
    file[id],
    file[hash],
)

command get
performance = sync | async, expected_latency = 'low'
inputs = (
    'id' : file[id],
    'location' : file[location],
)

command update
inputs = (
    'id' : file[id],
    'name' : file[name],
    'location' : file[location],
    'type' : file[type],
    'size' : file[size],
    'metadata' : file[metadata],
    'data' : file[data],
)

command duplicate
inputs = (
    'id' : file[id],
    'location' : file[location],
)

command rename
run = update('name')

command lock
run = update('lock')`

command unlock
run = update('unlock')



/* Subsets */

read

write

/* Datatypes
  This section of the memory module performs the critical
  job of ensuring consistent data type sizes accross platforms
*/